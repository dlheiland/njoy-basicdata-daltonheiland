Question Answers:

1- Using the Blast ID for a given day, do a sum on the opens field list and a sum on the clicks field list for that blast id from the message blast data. This will give the respective total_emails_opened and total_emails_clicked drilled down to for a specific blast_id. Then if need, this new field can then be used to generate more fields with the a smiliar analytic to total_emails_opened and total_emails_clicked. For example taking all blasts_ids for a given day and adding up their total_emails_opened and total_emails_clicked would give you total_emails_opened and total_emails_clicked for all blast campaigns in a day.

2- We would first need to understand what historical means to the stakeholder. Is historical a week, year, day, etc? Based on that given information we could then begin to search for all emails sent before that threshold in relation to today's date that have yet to be opened, and mark them as historical emails sent. After being marked as historical email sent, if we get a message transaction that shows it has been opened, we now associate it a new tag to that email for it being opened. So to get total_historical_emails_sent we would just do a count on all the emails we have marked as historical, and to get total_historical_emails_opened we would do a count on all emails marked historical that have recieved a new opened event at any time past the threshold set by the stakeholder.

3- Depending on if the data in the message blast changes in any shape or form because of it being weeks apart. I assume opens and clicks would update as they are information based on interactions with the email, but sent time would never change along with profile_id and blast_id. Using a insert into our table, I would just let the new record overwrite the old in the database. Certain data in the message blast will never change, while other fields are based off a user's interaction. The user could for a year, every 3 weeks open the email and click it again,causing this to cycle again, each time adding to opens and clicks with new information.

4- Add a field named 'last_updated_by_system' that is pushed into the dashboard and is visible. It is a system generated field on a system only used table for logging and processing. This would allow the user to know its current status at all times.